--Init
if not game:IsLoaded() then game.Loaded:Wait() end
if not syn or not protectgui then getgenv().protectgui = function() end end
local resume = coroutine.resume
local create = coroutine.create
local version = 0.45
local Players = game:GetService("Players")
local FindFirstChild = game.FindFirstChild
local Camera = workspace.CurrentCamera
local GetPlayers = Players.GetPlayers
local WorldToScreen = Camera.WorldToScreenPoint
local WorldToViewportPoint = Camera.WorldToViewportPoint
local worldToViewportPoint = Camera.WorldToViewportPoint
local repstorage = game:GetService("ReplicatedStorage")
local UniversalTables = require(repstorage.Modules:WaitForChild("UniversalTables"))
local LOCAL_PLAYER = Players.LocalPlayer
local INPUT_SERVICE = game:GetService("UserInputService")
local RunService = game:GetService("RunService")
local Players     = game:GetService("Players")
local RunService  = game:GetService("RunService")
local LocalPlayer = Players.LocalPlayer
local Character   = LocalPlayer.Character
local zoomamount = 5
local RootPart    = Character:FindFirstChild("HumanoidRootPart")
local Heartbeat, RStepped, Stepped = RunService.Heartbeat, RunService.RenderStepped, RunService.Stepped
local RVelocity, YVelocity = nil, 0.5
local FlyToggle = false
local SpeedToggle = false
local Speed = 20
local FlySpeed = 20
local frames = 0
local LocalPlayerName = game.Players.LocalPlayer
local ValidTargetParts = {"Head", "HumanoidRootPart"}
local Drawingnew = Drawing.new
local Color3fromRGB = Color3.fromRGB
local Vector3new = Vector3.new
local Vector2new = Vector2.new
local mathfloor = math.floor
local BulletTracer = false
local mathceil = math.ceil
lastpostion = Vector3.new(0,0,0)
shoot = false
hitlog = false
local repStorage = game["ReplicatedStorage"]
local ReplicatedStorage = game:GetService("ReplicatedStorage")
local ReplicatedPlayers = ReplicatedStorage:FindFirstChild("Players")
local ESP, ESP_RenderStepped, Framework = loadstring(game:HttpGet('https://www.octohook.xyz/ionhub/ionhub_esp.lua'))()
local headshot_sound = Instance.new("Sound", game.CoreGui)
headshot_sound.Volume = 10
local bodyshot_sound = Instance.new("Sound", game.CoreGui)
bodyshot_sound.Volume = 10
local hit_sounds = {
    Neverlose = "rbxassetid://8726881116",
    Gamesense = "rbxassetid://4817809188",
    Bell = "rbxassetid://6534947240",
    Rust = "rbxassetid://1255040462",
    Minecraft = "rbxassetid://4018616850",
    Osu = "rbxassetid://7149255551",
    Weeb = "rbxassetid://6442965016",
}
local all_hit_sounds = {}
all_hit_sounds[1] = "None"
for i, v in pairs(hit_sounds) do
    all_hit_sounds[#all_hit_sounds + 1] = i
end
local function gs(a)
    return game:GetService(a);
end

function Beam(v1, v2)
    local colorSequence = ColorSequence.new({
    ColorSequenceKeypoint.new(0, Color3.fromRGB(255, 0, 255)),
    ColorSequenceKeypoint.new(1,  Color3.fromRGB(255, 0, 255)),
    })
    -- main part
    local Part = Instance.new("Part", Instance.new("Part", workspace))
    Part.Size = Vector3.new(1, 1, 1)
    Part.Transparency = 1
    Part.CanCollide = false
    Part.CFrame = CFrame.new(v1)
    Part.Anchored = true
    -- attachment
    local Attachment = Instance.new("Attachment", Part)
    -- part 2
    local Part2 = Instance.new("Part", Instance.new("Part", workspace))
    Part2.Size = Vector3.new(1, 1, 1)
    Part2.Transparency =  1
    Part2.CanCollide = false
    Part2.CFrame = CFrame.new(v2)
    Part2.Anchored = true
    Part2.Color = Color3.fromRGB(255, 0, 255)
    -- another attachment
    local Attachment2 = Instance.new("Attachment", Part2)
    -- beam
    local Beam = Instance.new("Beam", Part)
    Beam.FaceCamera = true
    Beam.Color = colorSequence
    Beam.Attachment0 = Attachment
    Beam.Attachment1 = Attachment2
    Beam.LightEmission = 6
    Beam.LightInfluence = 1
    Beam.Width0 = 1
    Beam.Width1 = 0.6
    Beam.Texture = "rbxassetid://446111271"
    Beam.LightEmission = 1
    Beam.LightInfluence = 1
    Beam.TextureMode = Enum.TextureMode.Wrap -- wrap so length can be set by TextureLength
    Beam.TextureLength = 3 -- repeating texture is 1 stud long 
    Beam.TextureSpeed = 3
    delay(2, function()
    for i = 0.5, 1, 0.02 do
    wait()
    Beam.Transparency = NumberSequence.new(i)
    end
    Part:Destroy()
    Part2:Destroy()
    end)
end

function hitmarker()
    coroutine.wrap(function()
		if BulletTracer then
			local Line = Drawing.new("Line")
			local Line2 = Drawing.new("Line")
			local Line3 = Drawing.new("Line")
			local Line4 = Drawing.new("Line")

			local x, y = Camera.ViewportSize.X/2, Camera.ViewportSize.Y/2

			Line.From = Vector2.new(x + 4, y + 4)
			Line.To = Vector2.new(x + 10, y + 10)
			Line.Color = Color3.fromRGB(255,255,255)
			Line.Visible = true 

			Line2.From = Vector2.new(x + 4, y - 4)
			Line2.To = Vector2.new(x + 10, y - 10)
			Line2.Color = Color3.fromRGB(255,255,255)
			Line2.Visible = true 

			Line3.From = Vector2.new(x - 4, y - 4)
			Line3.To = Vector2.new(x - 10, y - 10)
			Line3.Color = Color3.fromRGB(255,255,255)
			Line3.Visible = true 

			Line4.From = Vector2.new(x - 4, y + 4)
			Line4.To = Vector2.new(x - 10, y + 10)
			Line4.Color = Color3.fromRGB(255,255,255)
			Line4.Visible = true

			Line.Transparency = 1
			Line2.Transparency = 1
			Line3.Transparency = 1
			Line4.Transparency = 1

			Line.Thickness = 1
			Line2.Thickness = 1
			Line3.Thickness = 1
			Line4.Thickness = 1

			wait(0.3)
			for i = 1,0,-0.1 do
				wait()
				Line.Transparency = i 
				Line2.Transparency = i
				Line3.Transparency = i
				Line4.Transparency = i
			end
			Line:Remove()
			Line2:Remove()
			Line3:Remove()
			Line4:Remove()
		end
	end)()
end

------------------------------------------------- -- Private Script esp

--[Main Variables]

local plrs = game["Players"]
local rs = game["RunService"]

local plr = plrs.LocalPlayer
local mouse = plr:GetMouse()
local camera = workspace.CurrentCamera
local worldToViewportPoint = camera.worldToViewportPoint

--[Optimisation Variables]

local Drawingnew = Drawing.new
local Color3fromRGB = Color3.fromRGB
local Vector3new = Vector3.new
local Vector2new = Vector2.new
local mathfloor = math.floor
local mathceil = math.ceil

--[Setup Table]

local esp = {
    players = {},
    objects = {},
    enabled = true,
    teamcheck = false,
    fontsize = 13,
    font = 2,
    maxdist = 0,
    settings = {
        name = {enabled = true, outline = true, displaynames = true, color = Color3fromRGB(255, 255, 255)},
        box = {enabled = false, outline = true, color = Color3fromRGB(255, 255, 255)},
        filledbox = {enabled = false, outline = true, transparency = 0.5, color = Color3fromRGB(255, 255, 255)},
        healthbar = {enabled = true, size = 3, outline = true},
        healthtext = {enabled = true, outline = true, color = Color3fromRGB(255, 255, 255)},
        distance = {enabled = true, outline = true, color = Color3fromRGB(255, 255, 255)},
        viewangle = {enabled = true, size = 6, color = Color3fromRGB(255, 255, 255)},
        skeleton = {enabled = true, color = Color3fromRGB(255, 255, 255)},
        tracer = {enabled = true, origin = "Middle", color = Color3fromRGB(255, 255, 255)}
    },
    settings_chams = {
        enabled = true,
        teamcheck = false,
        outline = false,
        fill_color = Color3fromRGB(255, 255, 255),
        outline_color = Color3fromRGB(0, 0, 0), 
        fill_transparency = 0,
        outline_transparency = 0,
        autocolor = true,
        visible_Color = Color3fromRGB(0, 255, 0),
        invisible_Color = Color3fromRGB(255, 0, 0),
    },
    customsettings = {

    }
}

esp.NewDrawing = function(type, properties)
    local newDrawing = Drawingnew(type)

    for i,v in next, properties or {} do
        newDrawing[i] = v
    end

    return newDrawing
end

esp.NewCham = function(properties)
    local newCham = Instance.new("Highlight", game.CoreGui)

    for i,v in next, properties or {} do
        newCham[i] = v
    end

    return newCham
end

esp.WallCheck = function(v)
    local ray = Ray.new(camera.CFrame.p, (v.Position - camera.CFrame.p).Unit * 300)
    local part, position = game:GetService("Workspace"):FindPartOnRayWithIgnoreList(ray, {plr.Character, camera}, false, true)
    if part then
        local hum = part.Parent:FindFirstChildOfClass("Humanoid")
        if not hum then
            hum = part.Parent.Parent:FindFirstChildOfClass("Humanoid")
        end
        if hum and v and hum.Parent == v.Parent then
            local Vector, Visible = camera:WorldToScreenPoint(v.Position)
            if Visible then
                return true
            end
        end
    end
end

esp.TeamCheck = function(v)
    if plr.TeamColor == v.TeamColor then
        return false
    end

    return true
end

esp.GetEquippedTool = function(v)
    return (v.Character:FindFirstChildOfClass("Tool") and tostring(v.Character:FindFirstChildOfClass("Tool"))) or "Hands"
end

esp.NewPlayer = function(v)
    esp.players[v] = {
        name = esp.NewDrawing("Text", {Color = Color3fromRGB(255, 255, 255), Outline = true, Center = true, Size = 13, Font = 2}),
        filledbox = esp.NewDrawing("Square", {Color = Color3fromRGB(255, 255, 255), Thickness = 1, Filled = true}),
        boxOutline = esp.NewDrawing("Square", {Color = Color3fromRGB(0, 0, 0), Thickness = 3}),
        box = esp.NewDrawing("Square", {Color = Color3fromRGB(255, 255, 255), Thickness = 1}),
        healthBarOutline = esp.NewDrawing("Line", {Color = Color3fromRGB(0, 0, 0), Thickness = 3}),
        healthBar = esp.NewDrawing("Line", {Color = Color3fromRGB(255, 255, 255), Thickness = 1}),
        healthText = esp.NewDrawing("Text", {Color = Color3fromRGB(255, 255, 255), Outline = true, Center = true, Size = 13, Font = 2}),
        distance = esp.NewDrawing("Text", {Color = Color3fromRGB(255, 255, 255), Outline = true, Center = true, Size = 13, Font = 2}),
        viewAngle = esp.NewDrawing("Line", {Color = Color3fromRGB(255, 255, 255), Thickness = 1}),
        weapon = esp.NewDrawing("Text", {Color = Color3fromRGB(255, 255, 255), Outline = true, Center = true, Size = 13, Font = 2}),
        tracer = esp.NewDrawing("Line", {Color = Color3fromRGB(255, 255, 255), Thickness = 1}),
        cham = esp.NewCham({FillColor = esp.settings_chams.fill_color, OutlineColor = esp.settings_chams.outline_color, FillTransparency = esp.settings_chams.fill_transparency, OutlineTransparency = esp.settings_chams.outline_transparency})
    }
end

local esp_Loop
esp_Loop = rs.RenderStepped:Connect(function()
    for i,v in pairs(esp.players) do
        if i.Character and i.Character:FindFirstChild("Humanoid") and i.Character:FindFirstChild("HumanoidRootPart") and i.Character:FindFirstChild("Head") and i.Character:FindFirstChild("Humanoid").Health > 0 and (esp.maxdist == 0 or (i.Character.HumanoidRootPart.Position - plr.Character.HumanoidRootPart.Position).Magnitude < esp.maxdist) then
            local hum = i.Character.Humanoid
            local hrp = i.Character.HumanoidRootPart
            local head = i.Character.Head

            local Vector, onScreen = camera:WorldToViewportPoint(i.Character.HumanoidRootPart.Position)
    
            local Size = (camera:WorldToViewportPoint(hrp.Position - Vector3new(0, 3, 0)).Y - camera:WorldToViewportPoint(hrp.Position + Vector3new(0, 2.6, 0)).Y) / 2
            local BoxSize = Vector2new(mathfloor(Size * 1.5), mathfloor(Size * 1.9))
            local BoxPos = Vector2new(mathfloor(Vector.X - Size * 1.5 / 2), mathfloor(Vector.Y - Size * 1.6 / 2))
    
            local BottomOffset = BoxSize.Y + BoxPos.Y + 1

            if onScreen and esp.settings_chams.enabled then
                v.cham.Adornee = i.Character
                v.cham.Enabled = esp.settings_chams.enabled
                v.cham.OutlineTransparency = esp.settings_chams.outline and esp.settings_chams.outline_transparency or 1
                v.cham.OutlineColor = esp.settings_chams.autocolor and esp.settings_chams.autocolor_outline and esp.WallCheck(i.Character.Head) and esp.settings_chams.visible_Color or esp.settings_chams.autocolor and esp.settings_chams.autocolor_outline and not esp.WallCheck(i.Character.Head) and esp.settings_chams.invisible_Color or esp.settings_chams.outline_color
                v.cham.FillColor = esp.settings_chams.autocolor and esp.WallCheck(i.Character.Head) and esp.settings_chams.visible_Color or esp.settings_chams.autocolor and not esp.WallCheck(i.Character.Head) and esp.settings_chams.invisible_Color or esp.settings_chams.fill_color
                v.cham.FillTransparency = esp.settings_chams.fill_transparency

                if esp.settings_chams.teamcheck then
                    if not esp.TeamCheck(i) then
                        v.cham.Enabled = false
                    end
                end
            else
                v.cham.Enabled = false
            end

            if esp.settings.tracer.enabled and esp.enabled then
                if esp.settings.tracer.origin == "Bottom" then
                    v.tracer.From = Vector2new(workspace.CurrentCamera.ViewportSize.X / 2, workspace.CurrentCamera.ViewportSize.Y)
                elseif esp.settings.tracer.origin == "Top" then
                    v.tracer.From = Vector2new(workspace.CurrentCamera.ViewportSize.X / 2,0)
                elseif esp.settings.tracer.origin == "Middle" then
                    v.tracer.From = Vector2new(workspace.CurrentCamera.ViewportSize.X / 2, workspace.CurrentCamera.ViewportSize.Y / 2)
                else
                    v.tracer.From = Vector2new(workspace.CurrentCamera.ViewportSize.X / 2, workspace.CurrentCamera.ViewportSize.Y / 2)
                end

                v.tracer.To = Vector2new(Vector.X, Vector.Y)
                v.tracer.Color = esp.settings.tracer.color
                v.tracer.Visible = true
            else
                v.tracer.Visible = false
            end

            if onScreen and esp.enabled then
                if esp.settings.name.enabled then
                    v.name.Position = Vector2new(BoxSize.X / 2 + BoxPos.X, BoxPos.Y - 16)
                    v.name.Outline = esp.settings.name.outline
                    v.name.Color = esp.settings.name.color

                    v.name.Font = esp.font
                    v.name.Size = esp.fontsize

                    if esp.settings.name.displaynames then
                        v.name.Text = i.DisplayName
                    else
                        v.name.Text = i.Name
                    end

                    v.name.Visible = true
                else
                    v.name.Visible = false
                end

                if esp.settings.distance.enabled and plr.Character and plr.Character:FindFirstChild("HumanoidRootPart") then
                    v.distance.Position = Vector2new(BoxSize.X / 2 + BoxPos.X, BottomOffset)
                    v.distance.Outline = esp.settings.distance.outline
                    v.distance.Text = "[" .. mathfloor((hrp.Position - plr.Character.HumanoidRootPart.Position).Magnitude) .. "m]"
                    v.distance.Color = esp.settings.distance.color
                    BottomOffset = BottomOffset + 15

                    v.distance.Font = esp.font
                    v.distance.Size = esp.fontsize

                    v.distance.Visible = true
                else
                    v.distance.Visible = false
                end

                if esp.settings.filledbox.enabled then
                    v.filledbox.Size = BoxSize + Vector2.new(-2, -2)
                    v.filledbox.Position = BoxPos + Vector2.new(1, 1)
                    v.filledbox.Color = esp.settings.filledbox.color
                    v.filledbox.Transparency = esp.settings.filledbox.transparency
                    v.filledbox.Visible = true
                else
                    v.filledbox.Visible = false
                end

                if esp.settings.box.enabled then
                    v.boxOutline.Size = BoxSize
                    v.boxOutline.Position = BoxPos
                    v.boxOutline.Visible = esp.settings.box.outline
    
                    v.box.Size = BoxSize
                    v.box.Position = BoxPos
                    v.box.Color = esp.settings.box.color
                    v.box.Visible = true
                else
                    v.boxOutline.Visible = false
                    v.box.Visible = false
                end

                if esp.settings.healthbar.enabled then
                    v.healthBar.From = Vector2new((BoxPos.X - 5), BoxPos.Y + BoxSize.Y)
                    v.healthBar.To = Vector2new(v.healthBar.From.X, v.healthBar.From.Y - (hum.Health / hum.MaxHealth) * BoxSize.Y)
                    v.healthBar.Color = Color3fromRGB(255 - 255 / (hum["MaxHealth"] / hum["Health"]), 255 / (hum["MaxHealth"] / hum["Health"]), 0)
                    v.healthBar.Visible = true
                    v.healthBar.Thickness = esp.settings.healthbar.size

                    v.healthBarOutline.From = Vector2new(v.healthBar.From.X, BoxPos.Y + BoxSize.Y + 1)
                    v.healthBarOutline.To = Vector2new(v.healthBar.From.X, (v.healthBar.From.Y - 1 * BoxSize.Y) -1)
                    v.healthBarOutline.Visible = esp.settings.healthbar.outline
                    v.healthBarOutline.Thickness = esp.settings.healthbar.size + 2
                else
                    v.healthBarOutline.Visible = false
                    v.healthBar.Visible = false
                end

                if esp.settings.healthtext.enabled then
                    v.healthText.Text = tostring(mathfloor(hum.Health))
                    v.healthText.Position = Vector2new((BoxPos.X - 20), (BoxPos.Y + BoxSize.Y - 1 * BoxSize.Y) -1)
                    v.healthText.Color = esp.settings.healthtext.color
                    v.healthText.Outline = esp.settings.healthtext.outline

                    v.healthText.Font = esp.font
                    v.healthText.Size = esp.fontsize

                    v.healthText.Visible = true
                else
                    v.healthText.Visible = false
                end

                if esp.settings.viewangle.enabled and head and head.CFrame then
                    v.viewAngle.From = Vector2new(camera:worldToViewportPoint(head.CFrame.p).X, camera:worldToViewportPoint(head.CFrame.p).Y)
                    v.viewAngle.To = Vector2new(camera:worldToViewportPoint((head.CFrame + (head.CFrame.lookVector * esp.settings.viewangle.size)).p).X, camera:worldToViewportPoint((head.CFrame + (head.CFrame.lookVector * esp.settings.viewangle.size)).p).Y)
                    v.viewAngle.Color = esp.settings.viewangle.color
                    v.viewAngle.Visible = true
                else
                    v.viewAngle.Visible = false
                end

                --[[if esp.settings.weapon.enabled then
                    v.weapon.Visible = true
                    v.weapon.Position = Vector2new(BoxSize.X + BoxPos.X + v.weapon.TextBounds.X / 2 + 3, BoxPos.Y - 3)
                    v.weapon.Outline = esp.settings.name.outline
                    v.weapon.Color = esp.settings.name.color

                    v.weapon.Font = esp.font
                    v.weapon.Size = esp.fontsize

                    v.weapon.Text = esp.GetEquippedTool(i)
                else
                    v.weapon.Visible = false
                end]]

                if esp.teamcheck then
                    if esp.TeamCheck(i) then
                        v.name.Visible = esp.settings.name.enabled
                        v.box.Visible = esp.settings.box.enabled
                        v.filledbox.Visible = esp.settings.box.enabled
                        v.healthBar.Visible = esp.settings.healthbar.enabled
                        v.healthText.Visible = esp.settings.healthtext.enabled
                        v.distance.Visible = esp.settings.distance.enabled
                        v.viewAngle.Visible = esp.settings.viewangle.enabled
                        v.weapon.Visible = esp.settings.weapon.enabled
                        v.tracer.Visible = esp.settings.tracer.enabled
                    else
                        v.name.Visible = false
                        v.boxOutline.Visible = false
                        v.box.Visible = false
                        v.filledbox.Visible = false
                        v.healthBarOutline.Visible = false
                        v.healthBar.Visible = false
                        v.healthText.Visible = false
                        v.distance.Visible = false
                        v.viewAngle.Visible = false
                        v.weapon.Visible = false
                        v.tracer.Visible = false
                    end
                end
            else
                v.name.Visible = false
                v.boxOutline.Visible = false
                v.box.Visible = false
                v.filledbox.Visible = false
                v.healthBarOutline.Visible = false
                v.healthBar.Visible = false
                v.healthText.Visible = false
                v.distance.Visible = false
                v.viewAngle.Visible = false
                v.weapon.Visible = false
                v.tracer.Visible = false
            end
        else
            v.name.Visible = false
            v.boxOutline.Visible = false
            v.box.Visible = false
            v.filledbox.Visible = false
            v.healthBarOutline.Visible = false
            v.healthBar.Visible = false
            v.healthText.Visible = false
            v.distance.Visible = false
            v.viewAngle.Visible = false
            v.cham.Enabled = false
            v.weapon.Visible = false
            v.tracer.Visible = false
        end
    end
end)

local function DrawLine()
    local l = Drawing.new("Line")
    l.Visible = false
    l.From = Vector2.new(0, 0)
    l.To = Vector2.new(1, 1)
    l.Color = esp.settings.skeleton.color
    l.Thickness = 1
    l.Transparency = 1
    return l
end

local function Skeletonesp(plr)
    repeat wait() until plr.Character ~= nil and plr.Character:FindFirstChild("Humanoid") ~= nil
    local limbs = {}
    local R15 = (plr.Character.Humanoid.RigType == Enum.HumanoidRigType.R15) and true or false
    limbs = {
        -- Spine
        Head_UpperTorso = DrawLine(),
        UpperTorso_LowerTorso = DrawLine(),
        -- Left Arm
        UpperTorso_LeftUpperArm = DrawLine(),
        LeftUpperArm_LeftLowerArm = DrawLine(),
        LeftLowerArm_LeftHand = DrawLine(),
        -- Right Arm
        UpperTorso_RightUpperArm = DrawLine(),
        RightUpperArm_RightLowerArm = DrawLine(),
        RightLowerArm_RightHand = DrawLine(),
        -- Left Leg
        LowerTorso_LeftUpperLeg = DrawLine(),
        LeftUpperLeg_LeftLowerLeg = DrawLine(),
        LeftLowerLeg_LeftFoot = DrawLine(),
        -- Right Leg
        LowerTorso_RightUpperLeg = DrawLine(),
        RightUpperLeg_RightLowerLeg = DrawLine(),
        RightLowerLeg_RightFoot = DrawLine(),
    }
    local function Visibility(state)
        for i, v in pairs(limbs) do
            v.Visible = state
        end
    end

    local function Colorize(color)
        for i, v in pairs(limbs) do
            v.Color = color
        end
    end

    local function UpdaterR15()
        local connection
        connection = game:GetService("RunService").RenderStepped:Connect(function()
            if plr.Character ~= nil and plr.Character:FindFirstChild("Humanoid") ~= nil and plr.Character:FindFirstChild("HumanoidRootPart") ~= nil and plr.Character.Humanoid.Health > 0 then
                local HUM, vis = camera:WorldToViewportPoint(plr.Character.HumanoidRootPart.Position)
                if vis and esp.settings.skeleton.enabled and esp.enabled then
                    -- Head
                    local H = camera:WorldToViewportPoint(plr.Character.Head.Position)
                    if limbs.Head_UpperTorso.From ~= Vector2.new(H.X, H.Y) then
                        --Spine
                        local UT = camera:WorldToViewportPoint(plr.Character.UpperTorso.Position)
                        local LT = camera:WorldToViewportPoint(plr.Character.LowerTorso.Position)
                        -- Left Arm
                        local LUA = camera:WorldToViewportPoint(plr.Character.LeftUpperArm.Position)
                        local LLA = camera:WorldToViewportPoint(plr.Character.LeftLowerArm.Position)
                        local LH = camera:WorldToViewportPoint(plr.Character.LeftHand.Position)
                        -- Right Arm
                        local RUA = camera:WorldToViewportPoint(plr.Character.RightUpperArm.Position)
                        local RLA = camera:WorldToViewportPoint(plr.Character.RightLowerArm.Position)
                        local RH = camera:WorldToViewportPoint(plr.Character.RightHand.Position)
                        -- Left leg
                        local LUL = camera:WorldToViewportPoint(plr.Character.LeftUpperLeg.Position)
                        local LLL = camera:WorldToViewportPoint(plr.Character.LeftLowerLeg.Position)
                        local LF = camera:WorldToViewportPoint(plr.Character.LeftFoot.Position)
                        -- Right leg
                        local RUL = camera:WorldToViewportPoint(plr.Character.RightUpperLeg.Position)
                        local RLL = camera:WorldToViewportPoint(plr.Character.RightLowerLeg.Position)
                        local RF = camera:WorldToViewportPoint(plr.Character.RightFoot.Position)

                        --Head
                        limbs.Head_UpperTorso.From = Vector2.new(H.X, H.Y)
                        limbs.Head_UpperTorso.To = Vector2.new(UT.X, UT.Y)

                        --Spine
                        limbs.UpperTorso_LowerTorso.From = Vector2.new(UT.X, UT.Y)
                        limbs.UpperTorso_LowerTorso.To = Vector2.new(LT.X, LT.Y)

                        -- Left Arm
                        limbs.UpperTorso_LeftUpperArm.From = Vector2.new(UT.X, UT.Y)
                        limbs.UpperTorso_LeftUpperArm.To = Vector2.new(LUA.X, LUA.Y)

                        limbs.LeftUpperArm_LeftLowerArm.From = Vector2.new(LUA.X, LUA.Y)
                        limbs.LeftUpperArm_LeftLowerArm.To = Vector2.new(LLA.X, LLA.Y)

                        limbs.LeftLowerArm_LeftHand.From = Vector2.new(LLA.X, LLA.Y)
                        limbs.LeftLowerArm_LeftHand.To = Vector2.new(LH.X, LH.Y)

                        -- Right Arm
                        limbs.UpperTorso_RightUpperArm.From = Vector2.new(UT.X, UT.Y)
                        limbs.UpperTorso_RightUpperArm.To = Vector2.new(RUA.X, RUA.Y)

                        limbs.RightUpperArm_RightLowerArm.From = Vector2.new(RUA.X, RUA.Y)
                        limbs.RightUpperArm_RightLowerArm.To = Vector2.new(RLA.X, RLA.Y)

                        limbs.RightLowerArm_RightHand.From = Vector2.new(RLA.X, RLA.Y)
                        limbs.RightLowerArm_RightHand.To = Vector2.new(RH.X, RH.Y)

                        -- Left Leg
                        limbs.LowerTorso_LeftUpperLeg.From = Vector2.new(LT.X, LT.Y)
                        limbs.LowerTorso_LeftUpperLeg.To = Vector2.new(LUL.X, LUL.Y)

                        limbs.LeftUpperLeg_LeftLowerLeg.From = Vector2.new(LUL.X, LUL.Y)
                        limbs.LeftUpperLeg_LeftLowerLeg.To = Vector2.new(LLL.X, LLL.Y)

                        limbs.LeftLowerLeg_LeftFoot.From = Vector2.new(LLL.X, LLL.Y)
                        limbs.LeftLowerLeg_LeftFoot.To = Vector2.new(LF.X, LF.Y)

                        -- Right Leg
                        limbs.LowerTorso_RightUpperLeg.From = Vector2.new(LT.X, LT.Y)
                        limbs.LowerTorso_RightUpperLeg.To = Vector2.new(RUL.X, RUL.Y)

                        limbs.RightUpperLeg_RightLowerLeg.From = Vector2.new(RUL.X, RUL.Y)
                        limbs.RightUpperLeg_RightLowerLeg.To = Vector2.new(RLL.X, RLL.Y)

                        limbs.RightLowerLeg_RightFoot.From = Vector2.new(RLL.X, RLL.Y)
                        limbs.RightLowerLeg_RightFoot.To = Vector2.new(RF.X, RF.Y)
                    end

                    --Colorize(esp.settings.skeleton.color)

                    if limbs.Head_UpperTorso.Visible ~= true then
                        Visibility(true)
                    end
                else 
                    if limbs.Head_UpperTorso.Visible ~= false then
                        Visibility(false)
                    end
                end
            else 
                if limbs.Head_UpperTorso.Visible ~= false then
                    Visibility(false)
                end
                if game.Players:FindFirstChild(plr.Name) == nil then 
                    for i, v in pairs(limbs) do
                        v:Remove()
                    end
                    connection:Disconnect()
                end
            end
        end)
    end
    
    coroutine.wrap(UpdaterR15)()
end

for _,v in ipairs(plrs:GetPlayers()) do
    if v ~= plr then
        esp.NewPlayer(v)
        Skeletonesp(v)
    end
end

plrs.ChildAdded:Connect(function(v)
    esp.NewPlayer(v)
    Skeletonesp(v)
end)

plrs.PlayerRemoving:Connect(function(v)
    for i2,v2 in pairs(esp.players[v]) do
        pcall(function()
            v2:Remove()
            v2:Destroy()
        end)
    end

    esp.players[v] = nil
end)

esp.Unload = function()
    esp_Loop:Disconnect()
    esp_Loop = nil
    
    for i,v in pairs(esp.players) do
        for i2, v2 in pairs(v) do
            if v2 == "cham" then
                v2:Destroy()
            else
                v2:Remove()
            end
        end
    end

    table.clear(esp)
    esp = nil
end

getgenv().esp = esp
-------------------------------------------------

local VFX = nil; for i,v in next, getgc(true) do
    if typeof(v) == "table" and rawget(v, "RecoilCamera") then
        VFX = v
        break
    end
end

local invDrawings = {}
local cachedPlayers = {}
local connections = {};

--Instances

local SFOVCircle = Drawing.new("Circle")
SFOVCircle.Position = Vector2.new(game.workspace.CurrentCamera.ViewportSize.X / 2, game.workspace.CurrentCamera.ViewportSize.Y / 2)
SFOVCircle.Radius = 0
SFOVCircle.Filled = false
SFOVCircle.Color = Color3.fromRGB(255, 255, 255)
SFOVCircle.Visible = false
SFOVCircle.Transparency = 0
SFOVCircle.NumSides = 0
SFOVCircle.Thickness = 0

local AFOVCircle = Drawing.new("Circle")
AFOVCircle.Position = Vector2.new(game.workspace.CurrentCamera.ViewportSize.X / 2, game.workspace.CurrentCamera.ViewportSize.Y / 2)
AFOVCircle.Radius = 0
AFOVCircle.Filled = false
AFOVCircle.Color = Color3.fromRGB(255, 255, 255)
AFOVCircle.Visible = false
AFOVCircle.Transparency = 0
AFOVCircle.NumSides = 0
AFOVCircle.Thickness = 0

local Snapline_Line = Drawing.new("Line")
Snapline_Line.Visible = true
Snapline_Line.Thickness = 1
Snapline_Line.Transparency = 1
Snapline_Line.From = Vector2.new(game.workspace.CurrentCamera.ViewportSize.X / 2, game.workspace.CurrentCamera.ViewportSize.Y / 2)
Snapline_Line.To = Vector2.new(game.workspace.CurrentCamera.ViewportSize.X / 2, game.workspace.CurrentCamera.ViewportSize.Y / 2)
Snapline_Line.Color = Color3.fromRGB(255, 255, 255)

local Snapline_Line2 = Drawing.new("Line")
Snapline_Line2.Visible = true
Snapline_Line2.Thickness = 1
Snapline_Line2.Transparency = 1
Snapline_Line2.From = Vector2.new(game.workspace.CurrentCamera.ViewportSize.X / 2, game.workspace.CurrentCamera.ViewportSize.Y / 2)
Snapline_Line2.To = Vector2.new(game.workspace.CurrentCamera.ViewportSize.X / 2, game.workspace.CurrentCamera.ViewportSize.Y / 2)
Snapline_Line2.Color = Color3.fromRGB(255, 255, 255)

local Crosshair_Horizontal = Drawing.new("Line")
Crosshair_Horizontal.Visible = false
Crosshair_Horizontal.Thickness = 1
Crosshair_Horizontal.Transparency = 1
Crosshair_Horizontal.From = Vector2.new(Camera.ViewportSize.X / 2, Camera.ViewportSize.Y / 2)
Crosshair_Horizontal.To = Vector2.new(Camera.ViewportSize.X / 2, Camera.ViewportSize.Y / 2)
Crosshair_Horizontal.Color = Color3.fromRGB(255, 255, 255)

local Crosshair_Vertical = Drawing.new("Line")
Crosshair_Vertical.Visible = false
Crosshair_Vertical.Thickness = 1
Crosshair_Vertical.Transparency = 1
Crosshair_Vertical.From = Vector2.new(Camera.ViewportSize.X / 2, Camera.ViewportSize.Y / 2)
Crosshair_Vertical.To = Vector2.new(Camera.ViewportSize.X / 2, Camera.ViewportSize.Y / 2)
Crosshair_Vertical.Color = Color3.fromRGB(255, 255, 255)

--Functions

function SpeedHack()
    resume(create(function()
        while SpeedToggle do
            local rootpart = LOCAL_PLAYER.Character:FindFirstChild("HumanoidRootPart")
            if rootpart ~= nil then
                local travel = Vector3.new()
                local looking = Workspace.CurrentCamera.CFrame.lookVector
                if INPUT_SERVICE:IsKeyDown(Enum.KeyCode.W) then
                    travel += Vector3.new(looking.x, 0, looking.Z)
                end
                if INPUT_SERVICE:IsKeyDown(Enum.KeyCode.S) then
                    travel -= Vector3.new(looking.x, 0, looking.Z)
                end
                if INPUT_SERVICE:IsKeyDown(Enum.KeyCode.D) then
                    travel += Vector3.new(-looking.Z, 0, looking.x)
                end
                if INPUT_SERVICE:IsKeyDown(Enum.KeyCode.A) then
                    travel += Vector3.new(looking.Z, 0, -looking.x)
                end

                travel = travel.Unit

                local newDir = Vector3.new(travel.x * Speed, rootpart.Velocity.y, travel.Z * Speed)

                if travel.Unit.x == travel.Unit.x then
                    rootpart.Velocity = newDir
                end
            end
            task.wait(0.01)
        end
    end))
end

function CalculateVelocity(Before, After, deltaTime)
	-- // Vars
	local Displacement = (After - Before)
	local Velocity = Displacement / deltaTime

	-- // Return
	return Velocity
end

function Connection(signal,callback,...)
    local connection = signal:Connect(callback,...)
    table.insert(connections,connection)
    return connection
end

function FlyHack()
    local rootpart = LOCAL_PLAYER.Character:FindFirstChild("HumanoidRootPart")

    for lI, lV in pairs(LOCAL_PLAYER.Character:GetDescendants()) do
        if lV:IsA("BasePart") then
            lV.CanCollide = false
        end
    end

    resume(create(function()
        while FlyToggle do
            local travel = Vector3.new()
            local looking = workspace.CurrentCamera.CFrame.lookVector --getting camera looking vector
    
            if INPUT_SERVICE:IsKeyDown(Enum.KeyCode.W) then
                travel += looking
            end
            if INPUT_SERVICE:IsKeyDown(Enum.KeyCode.S) then
                travel -= looking
            end
            if INPUT_SERVICE:IsKeyDown(Enum.KeyCode.D) then
                travel += Vector3.new(-looking.Z, 0, looking.x)
            end
            if INPUT_SERVICE:IsKeyDown(Enum.KeyCode.A) then
                travel += Vector3.new(looking.Z, 0, -looking.x)
            end

            if INPUT_SERVICE:IsKeyDown(Enum.KeyCode.Space) then
                travel += Vector3.new(0, 1, 0)
            end
            if INPUT_SERVICE:IsKeyDown(Enum.KeyCode.LeftShift) then
                travel -= Vector3.new(0, 1, 0)
            end

            if travel.Unit.x == travel.Unit.x then
                rootpart.Anchored = false
                rootpart.Velocity = travel.Unit * FlySpeed --multiplaye the unit by the speed to make
            else
                rootpart.Velocity = Vector3.new(0, 0, 0)
                rootpart.Anchored = false
            end
            task.wait(0.01)
        end
    end))
end

function getPositionOnScreen(Vector)
    local Vec3, OnScreen = WorldToScreen(Camera, Vector)
    return Vector2.new(Vec3.X, Vec3.Y), OnScreen
end

function getClosestPlayerS()
    if not Options.stargetpart.Value then return end
    local Closest
    local DistanceToMouse
    for _, Player in next, GetPlayers(Players) do
        if Player ~= game.Players.LocalPlayer then
            if Player == LocalPlayer then continue end

            local Character = Player.Character
            if not Character then continue end
            
            --if Toggles.svisible.Value and not IsPlayerVisible(Player) then continue end

            local HumanoidRootPart = FindFirstChild(Character, "HumanoidRootPart")
            local Humanoid = FindFirstChild(Character, "Humanoid")
            if not HumanoidRootPart or not Humanoid or Humanoid and Humanoid.Health <= 0 then continue end

            local ScreenPosition, OnScreen = getPositionOnScreen(HumanoidRootPart.Position)
            if not OnScreen then continue end

            local Distance = (Vector2.new(game.workspace.CurrentCamera.ViewportSize.X / 2, game.workspace.CurrentCamera.ViewportSize.Y / 2) - ScreenPosition).Magnitude
            if Distance <= (DistanceToMouse or Options.sradius.Value or 2000) then
                Closest = Character or false
                DistanceToMouse = Distance
            end
        else
            Closest = false
        end
    end

    if Toggles.aisilent.Value then
        for i,v in pairs(game:GetService("Workspace").AiZones:GetDescendants()) do
            if v:IsA("Model") and v.Name ~= "ElectricityAnomaly" or v.Name ~= "PMN2" then

                local Character = v

                local HumanoidRootPart = FindFirstChild(Character, "HumanoidRootPart")
                local Humanoid = FindFirstChild(Character, "Humanoid")
                if not HumanoidRootPart or not Humanoid or Humanoid and Humanoid.Health <= 0 then continue end

                local ScreenPosition, OnScreen = getPositionOnScreen(HumanoidRootPart.Position)
                if not OnScreen then continue end
                
                local Distance = (Vector2.new(game.workspace.CurrentCamera.ViewportSize.X / 2, game.workspace.CurrentCamera.ViewportSize.Y / 2) - ScreenPosition).Magnitude
                if Distance <= (DistanceToMouse or Options.sradius.Value or 2000) then
                    Closest = v or false
                    DistanceToMouse = Distance
                end
            end
        end
    end

    if Closest ~= false then
        return Closest
    else
        return false
    end
end

function getClosestPlayerA()
    if not Options.atargetpart.Value then return end
    local Closest
    local DistanceToMouse
    for _, Player in next, GetPlayers(Players) do
        if Player == LocalPlayer then continue end

        local Character = Player.Character
        if not Character then continue end
        
        --if Toggles.svisible.Value and not IsPlayerVisible(Player) then continue end

        local HumanoidRootPart = FindFirstChild(Character, "HumanoidRootPart")
        local Humanoid = FindFirstChild(Character, "Humanoid")
        if not HumanoidRootPart or not Humanoid or Humanoid and Humanoid.Health <= 0 then continue end

        local ScreenPosition, OnScreen = getPositionOnScreen(HumanoidRootPart.Position)
        if not OnScreen then continue end

        local Distance = (Vector2.new(game.workspace.CurrentCamera.ViewportSize.X / 2, game.workspace.CurrentCamera.ViewportSize.Y / 2) - ScreenPosition).Magnitude
        if Distance <= (DistanceToMouse or Options.aradius.Value or 2000) then
            Closest = Character or false
            DistanceToMouse = Distance
        end
    end
    if Closest ~= false then
        return Closest
    else
        return false
    end
end

function Fullbright()
    resume(create(function()
        while Toggles.fbright.Value do
            game:GetService("Lighting").Brightness = 2
            game:GetService("Lighting").ClockTime = 14
            game:GetService("Lighting").FogEnd = 100000
            game:GetService("Lighting").GlobalShadows = false
            game:GetService("Lighting").OutdoorAmbient = Color3.fromRGB(128, 128, 128)
            task.wait(0.001)
        end
    end))
end

function newDrawing(type, props)
    local d = Drawing.new(type);
    for i,v in next, props or {} do
        local s,e = pcall(function()
            d[i] = v;
        end)
        if not s then
            warn(e);
        end
    end
    return d;
end

local selectedPlayerDrawing = newDrawing('Text', {Text = 'PLAYERS INVENTORY:', Position = Vector2.new(10,350), Color = Color3.new(1,1,1), Outline = true, Size = 13, Font = 2})
function updateInvDrawings()
    selectedPlayerDrawing.Visible = true
    if init then
        local pos = 350
        for i,v in next, invDrawings do
            v[1].Visible = true;
            v[1].Position = Vector2.new(10, pos + 18);
            v[1].Text = v[2] == 1 and i or i..' x'..tostring(v[2]);
            pos = v[1].Position.Y;
        end
    end
end

local InventoryViewer = {
    Size = Vector2.new(300, 14), 
    Main = Framework:Draw("Square", {Thickness = 0, Size = Vector2.new(300, 14), Filled = true, Position = Vector2.new(0, game.workspace.CurrentCamera.ViewportSize.Y / 4), Transparency = 0.4}),
    Texts = {}
}
function InventoryViewer:Clear()
    for i, v in pairs(InventoryViewer.Texts) do
        v:Remove()
        InventoryViewer.Texts[i] = nil
        InventoryViewer.Main.Size = InventoryViewer.Size
    end
end
function InventoryViewer:AddText(Text, Tabulated, Main_Text)
    local Main = InventoryViewer.Main
    local Drawing = Framework:Draw("Text", {Text = Text, Color = Color3.new(1, 1, 1), Transparency = 1, Size = 13, Font = 2, Outline = true, Visible = true})
    table.insert(InventoryViewer.Texts, Drawing)
    local Drawings = #InventoryViewer.Texts
    Main.Size = Vector2.new(InventoryViewer.Size.X, 14 * Drawings)
    Drawing.Position = Main.Position + Vector2.new(5, (Drawings - 1) * 14)
    if Main_Text then
        Drawing.Center = true
        Drawing.Position = Main.Position + Vector2.new(Main.Size.X / 2, 0)
    end
    if Tabulated then
        Drawing.Position = Main.Position + Vector2.new(20, (Drawings - 1) * 14)
    end
    return Drawing
end
function InventoryViewer:Update()
    InventoryViewer.Size = Vector2.new(300, 14)
    local Scan, _Players = {}, Toggles.inventoryv.Value
    --[[if Containers then
        for i, v in pairs(Workspace.Containers:GetChildren()) do
            if v:IsA("Model") and v:FindFirstChild("Inventory") then
                table.insert(Scan, v)
            end
        end
    end]]
    if _Players then
        for i, v in pairs(Players:GetPlayers()) do
            if v ~= game.Players.LocalPlayer and v.Character and v.Character:FindFirstChild("HumanoidRootPart") and v.Character:FindFirstChildOfClass("Humanoid") then
                table.insert(Scan, v.Character)
            end
        end
    end
    local Target, Magnitude, lowMagnitude = nil, math.huge, math.huge
    for i, v in pairs(Scan) do
        local PrimaryPart = v.PrimaryPart
        if PrimaryPart then
            local Vector, onScreen = Camera:WorldToViewportPoint(PrimaryPart.Position)
            if onScreen then
                local Magnitude = (Camera.ViewportSize / 2 - Framework:V3_To_V2(Vector)).Magnitude
                if Magnitude < lowMagnitude then
                    lowMagnitude = Magnitude
                    Target = v
                end
            end
        end
    end
    if not Target then
        InventoryViewer:Clear()
        InventoryViewer:AddText("Inventory Viewer", false, true)
        return
    end
    local Humanoid = Target:FindFirstChildOfClass("Humanoid")
    InventoryViewer:Clear()
    local MainText = InventoryViewer:AddText(Target.Name, false, true)
    Scan = {}
    local Maximal_X = 0
    if Humanoid then
        local Folder = ReplicatedPlayers[Target.Name]
        table.insert(Scan, Folder.Inventory)
        table.insert(Scan, Folder.Clothing)
        for i, v in pairs(Scan) do
            local Name = v.Name
            if Name == "Inventory" then
                for _, Item in pairs(v:GetChildren()) do
                    local ItemProperties = Item:FindFirstChild("ItemProperties")
                    if ItemProperties then
                        local ammoString = ""
                        local isGun = false
                        local ItemType = ItemProperties:GetAttribute("ItemType")
                        if ItemType and ItemType == "RangedWeapon" then
                            isGun = true
                            local Attachments = Item:FindFirstChild("Attachments")
                            if Attachments then
                                local Magazine = Attachments:FindFirstChild("Magazine")
                                if Magazine then
                                    Magazine = Magazine:FindFirstChildOfClass("StringValue")
                                    if Magazine then
                                        local MagazineProperties = Magazine:FindFirstChild("ItemProperties")
                                        if MagazineProperties then
                                            local LoadedAmmo = MagazineProperties:FindFirstChild("LoadedAmmo")
                                            if LoadedAmmo then
                                                for _, Slot in pairs(LoadedAmmo:GetChildren()) do
                                                    local AmmoType, Amount = Slot:GetAttribute("AmmoType"), Slot:GetAttribute("Amount")
                                                    if AmmoType and Amount then
                                                        ammoString = ammoString .. Amount .. " - " .. AmmoType:gsub("Tracer", "T") .. "; "
                                                    end
                                                end
                                            end
                                        end
                                    end
                                end
                            end
                        end
                        if ammoString == "" and isGun == false then
                            InventoryViewer:AddText("[Hotbar] " .. Item.Name)
                        elseif ammoString == "" then
                            local HotbarDrawing = InventoryViewer:AddText("[Hotbar] " .. Item.Name .. " [OUT OF AMMO]")
                            local textBoundsX = HotbarDrawing.TextBounds.X
                            if textBoundsX > Maximal_X then
                                Maximal_X = textBoundsX
                            end
                            if Maximal_X > InventoryViewer.Size.X then
                                InventoryViewer.Size = Vector2.new(Maximal_X + 10, InventoryViewer.Main.Size.Y)
                                InventoryViewer.Main.Size = InventoryViewer.Size
                                MainText.Position = InventoryViewer.Main.Position + Vector2.new(InventoryViewer.Main.Size.X / 2, 0)
                            end
                        else
                            ammoString = ammoString:sub(0, ammoString:len() - 2)
                            local HotbarDrawing = InventoryViewer:AddText("[Hotbar] " .. Item.Name .. " ["..ammoString.."]")
                            local textBoundsX = HotbarDrawing.TextBounds.X
                            if textBoundsX > Maximal_X then
                                Maximal_X = textBoundsX
                            end
                            if Maximal_X > InventoryViewer.Size.X then
                                InventoryViewer.Size = Vector2.new(Maximal_X + 10, InventoryViewer.Main.Size.Y)
                                InventoryViewer.Main.Size = InventoryViewer.Size
                                MainText.Position = InventoryViewer.Main.Position + Vector2.new(InventoryViewer.Main.Size.X / 2, 0)
                            end
                        end
                    else
                        InventoryViewer:AddText("[Hotbar] " .. Item.Name)
                    end
                end
            elseif Name == "Clothing" then
                for _, Clothing in pairs(v:GetChildren()) do
                    -- Clothing
                    local Attachments = Clothing:FindFirstChild("Attachments")
                    local attachmentString = ""
                    if Attachments then
                        for _, Slot in pairs(Attachments:GetChildren()) do
                            local Attachment = Slot:FindFirstChildOfClass("StringValue")
                            if Attachment then
                                attachmentString = attachmentString .. Attachment.Name .. "; "
                            end
                        end
                    end
                    attachmentString = attachmentString:sub(0, attachmentString:len() - 2)
                    if attachmentString == "" then
                        InventoryViewer:AddText(Clothing.Name)
                    else
                        local ClothingDrawing = InventoryViewer:AddText(Clothing.Name .. " [".. attachmentString .."]")
                        local textBoundsX = ClothingDrawing.TextBounds.X
                        if textBoundsX > Maximal_X then
                            Maximal_X = textBoundsX
                        end
                        if Maximal_X > InventoryViewer.Size.X then
                            InventoryViewer.Size = Vector2.new(Maximal_X + 10, InventoryViewer.Main.Size.Y)
                            InventoryViewer.Main.Size = InventoryViewer.Size
                            MainText.Position = InventoryViewer.Main.Position + Vector2.new(InventoryViewer.Main.Size.X / 2, 0)
                        end
                    end
                    -- Clothing Inventory
                    local Inventory = Clothing:FindFirstChild("Inventory")
                    if Inventory then
                        for _, Item in pairs(Inventory:GetChildren()) do
                            local ItemProperties = Item:FindFirstChild("ItemProperties")
                            if ItemProperties then
                                local Amount = ItemProperties:GetAttribute("Amount")
                                if Amount then
                                    if Amount > 1 then
                                        InventoryViewer:AddText(Item.Name .. " [" .. tostring(Amount) .. "]", true)
                                    else
                                        InventoryViewer:AddText(Item.Name, true)
                                    end
                                else
                                    InventoryViewer:AddText(Item.Name, true)
                                end
                            else
                                InventoryViewer:AddText(Item.Name, true)
                            end
                        end
                    end
                end
            end
        end
    else
        local Inventory = Target:FindFirstChild("Inventory")
        if Inventory then
            for _, Item in pairs(Inventory:GetChildren()) do
                local ItemProperties = Item:FindFirstChild("ItemProperties")
                if ItemProperties then
                    local Amount = ItemProperties:GetAttribute("Amount")
                    if Amount then
                        if Amount > 1 then
                            InventoryViewer:AddText(Item.Name .. " [" .. tostring(Amount) .. "]")
                        else
                            InventoryViewer:AddText(Item.Name)
                        end
                    else
                        InventoryViewer:AddText(Item.Name)
                    end
                else
                    InventoryViewer:AddText(Item.Name)
                end
            end
        end
    end
end

local repo = 'https://raw.githubusercontent.com/wally-rblx/LinoriaLib/main/'

local Library = loadstring(game:HttpGet(repo .. 'Library.lua'))()
local ThemeManager = loadstring(game:HttpGet(repo .. 'addons/ThemeManager.lua'))()
local SaveManager = loadstring(game:HttpGet(repo .. 'addons/SaveManager.lua'))()
esp = loadstring(game:HttpGet("https://raw.githubusercontent.com/Jonathan-2k/Dependencies/main/Crumbleware%20ESP"))()

local Window = Library:CreateWindow({
    Title = 'Shibahub.cc | Version 3.4 | OUTDATED',
    Center = true, 
    AutoShow = true,
})

local Tabs = {
    -- Creates a new tab titled Main
    Combat = Window:AddTab('Combat'),
    Visuals = Window:AddTab('Visuals'), 
    Movement = Window:AddTab('Misc'), 
    ['UI Settings'] = Window:AddTab('UI Settings'),
}
