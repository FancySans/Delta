--Variables
local CrumbleWare = 1.25
local resume = coroutine.resume
local create = coroutine.create
local RVelocity, YVelocity = nil, 0.5
local Players = game.Players
local Player = game.Players.LocalPlayer
local Camera = workspace.CurrentCamera
local WorldToScreen = Camera.WorldToScreenPoint
ReplicatedStorage = game.ReplicatedStorage
UniversalTables = require(ReplicatedStorage.Modules:WaitForChild("UniversalTables"))
FPS = 0

--Create Instances

local FovCircle = Drawing.new("Circle")
FovCircle.Position = Vector2.new(Camera.ViewportSize.X / 2, Camera.ViewportSize.Y / 2)
FovCircle.Radius = 0
FovCircle.Filled = false
FovCircle.Color = Color3.fromRGB(255, 255, 255)
FovCircle.Visible = false
FovCircle.Transparency = 0
FovCircle.NumSides = 0
FovCircle.Thickness = 0

local Snapline_Line = Drawing.new("Line")
Snapline_Line.Visible = true
Snapline_Line.Thickness = 1
Snapline_Line.Transparency = 1
Snapline_Line.From = Vector2.new(game.workspace.CurrentCamera.ViewportSize.X / 2, game.workspace.CurrentCamera.ViewportSize.Y / 2)
Snapline_Line.To = Vector2.new(game.workspace.CurrentCamera.ViewportSize.X / 2, game.workspace.CurrentCamera.ViewportSize.Y / 2)
Snapline_Line.Color = Color3.fromRGB(255, 255, 255)

local Crosshair_Horizontal = Drawing.new("Line")
Crosshair_Horizontal.Visible = false
Crosshair_Horizontal.Thickness = 1
Crosshair_Horizontal.Transparency = 1
Crosshair_Horizontal.From = Vector2.new(Camera.ViewportSize.X / 2, Camera.ViewportSize.Y / 2)
Crosshair_Horizontal.To = Vector2.new(Camera.ViewportSize.X / 2, Camera.ViewportSize.Y / 2)
Crosshair_Horizontal.Color = Color3.fromRGB(255, 255, 255)

local Crosshair_Vertical = Drawing.new("Line")
Crosshair_Vertical.Visible = false
Crosshair_Vertical.Thickness = 1
Crosshair_Vertical.Transparency = 1
Crosshair_Vertical.From = Vector2.new(Camera.ViewportSize.X / 2, Camera.ViewportSize.Y / 2)
Crosshair_Vertical.To = Vector2.new(Camera.ViewportSize.X / 2, Camera.ViewportSize.Y / 2)
Crosshair_Vertical.Color = Color3.fromRGB(255, 255, 255)

--GetTarget
function getPositionOnScreen(Vector)
    local Vec3, OnScreen = WorldToScreen(Camera, Vector)
    return Vector2.new(Vec3.X, Vec3.Y), OnScreen
end

function GetTarget()
    local Target
    local DistanceToMouse

    --Player

    for _, Player in pairs(Players:GetChildren()) do
        if Player ~= game.Players.LocalPlayer then
            if Player == LocalPlayer then continue end

            local Character = Player.Character
            if not Character then continue end

            local HumanoidRootPart = Character:FindFirstChild("HumanoidRootPart")
            local Humanoid = Character:FindFirstChild("Humanoid")
            if not HumanoidRootPart or not Humanoid or Humanoid and Humanoid.Health <= 0 then continue end

            local ScreenPosition, OnScreen = getPositionOnScreen(HumanoidRootPart.Position)
            if not OnScreen then continue end

            local Distance = (Vector2.new(game.workspace.CurrentCamera.ViewportSize.X / 2, game.workspace.CurrentCamera.ViewportSize.Y / 2) - ScreenPosition).Magnitude
            if Distance <= (DistanceToMouse or Options.FovRadius.Value or 2000) then
                Target = Character[Options.TargetPart.Value] or false
                DistanceToMouse = Distance
            end
        end
    end

    --Bots

    if Toggles.TargetBots.Value then
        for _,Folder in pairs(game:GetService("Workspace").AiZones:GetChildren()) do
            for _,Bot in pairs(Folder:GetChildren()) do
                if Bot and Bot.Name ~= "ElectricityAnomaly" or Bot.Name ~= "PMN2" then
                local Character = Bot
                if not Character then continue end

                local HumanoidRootPart = Character:FindFirstChild("HumanoidRootPart")
                local Humanoid = Character:FindFirstChild("Humanoid")
                if not HumanoidRootPart or not Humanoid or Humanoid and Humanoid.Health <= 0 then continue end

                local ScreenPosition, OnScreen = getPositionOnScreen(HumanoidRootPart.Position)
                if not OnScreen then continue end

                local Distance = (Vector2.new(game.workspace.CurrentCamera.ViewportSize.X / 2, game.workspace.CurrentCamera.ViewportSize.Y / 2) - ScreenPosition).Magnitude
                if Distance <= (DistanceToMouse or Options.FovRadius.Value or 2000) then
                    Target = Character[Options.TargetPart.Value] or false
                    DistanceToMouse = Distance
                end
                end
            end
        end
    end

    return Target or false
end

--Prediction
function CalculateHPrediction(TargetPos, TargetVelo, BulletVelocity)

    local PredictionAmount = (TargetPos - Camera.CFrame.p).Magnitude / BulletVelocity
    local NewPos = TargetPos + TargetVelo * PredictionAmount

    return NewPos
end

function CalculateYPrediction(TargetPos, TargetVelo, BulletVelocity)

    local PredictionAmount = 0
    local NewPos = 0

    return NewPos
end

--Resolver
function ResolveVelocity(Before, After, Delta)

    local Displacement = (After - Before)
	local Velocity = Displacement / Delta

    return Velocity
end

function GetNewHeadCFrame(Target)
    local Head = Target.Head
    local HumanoidRootPart = Target.HumanoidRootPart

    local NewHeadCFrame = HumanoidRootPart.CFrame + Vector3.new(0, 3, 0)

    return NewHeadCFrame
end

--Extra Functions

function HitMarker()
    coroutine.wrap(function()
        if HitMarker then
            local Line = Drawing.new("Line")
            local Line2 = Drawing.new("Line")
            local Line3 = Drawing.new("Line")
            local Line4 = Drawing.new("Line")

            local x, y = Camera.ViewportSize.X/2, Camera.ViewportSize.Y/2

            Line.From = Vector2.new(x + 4, y + 4)
            Line.To = Vector2.new(x + 10, y + 10)
            Line.Color = HitMarkerColor
            Line.Visible = true 

            Line2.From = Vector2.new(x + 4, y - 4)
            Line2.To = Vector2.new(x + 10, y - 10)
            Line2.Color = HitMarkerColor
            Line2.Visible = true 

            Line3.From = Vector2.new(x - 4, y - 4)
            Line3.To = Vector2.new(x - 10, y - 10)
            Line3.Color = HitMarkerColor
            Line3.Visible = true 

            Line4.From = Vector2.new(x - 4, y + 4)
            Line4.To = Vector2.new(x - 10, y + 10)
            Line4.Color = HitMarkerColor
            Line4.Visible = true

            Line.Transparency = 1
            Line2.Transparency = 1
            Line3.Transparency = 1
            Line4.Transparency = 1

            Line.Thickness = 1
            Line2.Thickness = 1
            Line3.Thickness = 1
            Line4.Thickness = 1

            wait(0.3)
            for i = 1,0,-0.1 do
                wait()
                Line.Transparency = i 
                Line2.Transparency = i
                Line3.Transparency = i
                Line4.Transparency = i
            end
            Line:Remove()
            Line2:Remove()
            Line3:Remove()
            Line4:Remove()
        end
	end)()
end

function HitTracer(v1, v2)
    local colorSequence = ColorSequence.new({
    ColorSequenceKeypoint.new(0, HitTracerColor),
    ColorSequenceKeypoint.new(1,  HitTracerColor),
    })
    -- main part
    local Part = Instance.new("Part", Instance.new("Part", workspace))
    Part.Size = Vector3.new(1, 1, 1)
    Part.Transparency = 1
    Part.CanCollide = false
    Part.CFrame = CFrame.new(v1)
    Part.Anchored = true
    -- attachment
    local Attachment = Instance.new("Attachment", Part)
    -- part 2
    local Part2 = Instance.new("Part", Instance.new("Part", workspace))
    Part2.Size = Vector3.new(1, 1, 1)
    Part2.Transparency =  1
    Part2.CanCollide = false
    Part2.CFrame = CFrame.new(v2)
    Part2.Anchored = true
    Part2.Color = Color3.fromRGB(255, 0, 255)
    -- another attachment
    local Attachment2 = Instance.new("Attachment", Part2)
    -- beam
    local Beam = Instance.new("Beam", Part)
    Beam.FaceCamera = true
    Beam.Color = colorSequence
    Beam.Attachment0 = Attachment
    Beam.Attachment1 = Attachment2
    Beam.LightEmission = 6
    Beam.LightInfluence = 1
    Beam.Width0 = 1
    Beam.Width1 = 0.6
    Beam.Texture = "rbxassetid://446111271"
    Beam.LightEmission = 1
    Beam.LightInfluence = 1
    Beam.TextureMode = Enum.TextureMode.Wrap -- wrap so length can be set by TextureLength
    Beam.TextureLength = 3 -- repeating texture is 1 stud long 
    Beam.TextureSpeed = 3
    delay(2, function()
    for i = 0.5, 1, 0.02 do
    wait()
    Beam.Transparency = NumberSequence.new(i)
    end
    Part:Destroy()
    Part2:Destroy()
    end)
end


local VFX = nil; for i,v in next, getgc(true) do
    if typeof(v) == "table" and rawget(v, "RecoilCamera") then
        VFX = v
        break
    end
end

local repo = 'https://raw.githubusercontent.com/wally-rblx/LinoriaLib/main/'

local Library = loadstring(game:HttpGet(repo .. 'Library.lua'))()
local ThemeManager = loadstring(game:HttpGet(repo .. 'addons/ThemeManager.lua'))()
local SaveManager = loadstring(game:HttpGet(repo .. 'addons/SaveManager.lua'))()

local Window = Library:CreateWindow({
    Title = 'Shibahub
    AutoShow = true,
})

local Tabs = {
    Combat = Window:AddTab('Combat'),
    Visual = Window:AddTab('Visuals'),
    Movement = Window:AddTab('Misc'), 
    ['UI Settings'] = Window:AddTab('UI Settings'),
}

--[[Combat]]--

local MainCombat = Tabs.Combat:AddLeftTabbox()
local CombatA = MainCombat:AddTab('Main')
local CombatB = MainCombat:AddTab('Fov')

CombatA:AddToggle("CEnabled", {Text = "Enabled", Default = false, Tooltip = 'Enables Combat Features'})
CombatA:AddToggle("SEnabled", {Text = "Silent Aim", Default = false, Tooltip = 'Enables Silent Aim Features'})
CombatA:AddToggle("AEnabled", {Text = "Aimbot", Default = false, Tooltip = 'Enables Aimbot Features'})
CombatA:AddToggle("TargetBots", {Text = "Target Bots", Default = false, Tooltip = 'Aimbot and Silent Aim Will Target Bots'})
CombatA:AddDropdown('TargetPart', {Values = { 'Head', 'HumanoidRootPart' },Default = 1,Multi = false,Text = 'Target',Tooltip = 'Changes the Target'})
CombatA:AddToggle("PredictEnabled", {Text = "Prediction", Default = false, Tooltip = 'Enables Prediction'})
CombatA:AddToggle("SnapEnabled", {Text = "Snaplines", Default = false, Tooltip = 'Enables Snaplines'}):AddColorPicker('SnaplineColor', {Default = Color3.fromRGB(255, 0, 0), Title = 'Snapline Color'})
Options.SnaplineColor:OnChanged(function() Snapline_Line.Color = Options.SnaplineColor.Value end)

CombatB:AddToggle("FovEnabled", {Text = "Fov Enabled", Default = false, Tooltip = 'Toggles The Circle'}):AddColorPicker('FovColor', {Default = Color3.fromRGB(255, 255, 255), Title = 'Circle Color'})
Options.FovColor:OnChanged(function() FovCircle.Color = Options.FovColor.Value end)
Toggles.FovEnabled:OnChanged(function() FovCircle.Visible = Toggles.FovEnabled.Value end)
CombatB:AddSlider('FovRadius', {Text = 'Radius', Default = 80, Min = 0, Max = 1200, Rounding = 0, Compact = true}):OnChanged(function() FovCircle.Radius = Options.FovRadius.Value  end )
CombatB:AddToggle("FovFilled", {Text = "Filled", Default = false, Tooltip = 'Fills The Circle'}):OnChanged(function() FovCircle.Filled = Toggles.FovFilled.Value end)
CombatB:AddSlider('FovTransparency', {Text = 'Transparency', Default = 100, Min = 0, Max = 100, Rounding = 2, Compact = true}):OnChanged(function() FovCircle.Transparency = Options.FovTransparency.Value / 100 end)
CombatB:AddSlider('FovSides', {Text = 'Sides', Default = 14, Min = 3, Max = 64, Rounding = 0, Compact = true}):OnChanged(function() FovCircle.NumSides = Options.FovSides.Value end)
CombatB:AddSlider('FovThickness', {Text = 'Thickness', Default = 0, Min = 0, Max = 10, Rounding = 0, Compact = true}):OnChanged(function() FovCircle.Thickness = Options.FovThickness.Value end)

local OtherCombat = Tabs.Combat:AddRightTabbox()
local OtherA = OtherCombat:AddTab('Gun Mods')
local OtherB = OtherCombat:AddTab('HitSounds')

OtherA:AddToggle("GEnabled", {Text = "Enabled", Default = false, Tooltip = 'Enables Gun Mods'})
OtherA:AddToggle('GunMods_NoRecoil', {Text = 'No Recoil', Default = false}):OnChanged(function()
    local RecoilCamera = VFX.RecoilCamera;
    VFX.RecoilCamera = function(...)
        if Toggles.GunMods_NoRecoil.Value and Toggles.GEnabled.Value then
            return 0
        else
           return RecoilCamera(...)
        end
    end
end)
OtherB:AddDropdown('HeadEnabled', {Values = {"Test"}, Default = 1, Multi = false, Text = 'Headshot Sound'}):OnChanged(function()
    if Options.HeadEnabled.Value == "None" then
        return
    end
    --headshot_sound.SoundId = hit_sounds[Options.HeadEnabled.Value]
end)
OtherB:AddSlider('HeadVolume', {Text = 'Volume', Default = 1, Min = 0, Max = 10, Rounding = 2, Compact = true}):OnChanged(function()
    --headshot_sound.Volume = Options.HeadVolume.Value
end)
OtherB:AddDropdown('BodyEnabled', {Values = {"Test"}, Default = 1, Multi = false, Text = 'Bodyshot Sound'}):OnChanged(function()
    if Options.BodyEnabled.Value == "None" then 
        return
    end
    --bodyshot_sound.SoundId =  hit_sounds[Options.BodyEnabled.Value]
end)
OtherB:AddSlider('BodyVolume', {Text = 'Volume', Default = 1, Min = 0, Max = 10, Rounding = 2, Compact = true}):OnChanged(function()
   -- bodyshot_sound.Volume = Options.BodyVolume.Value
end)

local CombatResolver = Tabs.Combat:AddRightTabbox()
local ResolveA = CombatResolver:AddTab('Resolver')

ResolveA:AddToggle("ResolverEnabled", {Text = "Enabled", Default = false, Tooltip = 'Resolves Antiaim'})
ResolveA:AddToggle("VelocityReEnabled", {Text = "Velocity Rebuilder", Default = false, Tooltip = 'Resolves Velocity Breaker'})
ResolveA:AddToggle("NoHeadReEnabled", {Text = "Body Rebuilder", Default = false, Tooltip = 'Resolves No Head'})

--[[End Of Combat]]--
